////1.静态变量：在程序执行之前就为它分配内存空间（在编译时），
//// 生命周期直到程序运行结束；静态变量必须要有初始值；
////2.静态变量和自动变量：说的是生命周期；
////3.局部变量和全局变量：说的是作用域；
////4.静态成员不属于某个对象上，所有对象共用同一份数据，因此访问方式有：
////通过对象访问；通过类名访问；
////5.静态成员属性需要类内声明，类外初始化；
////6.静态成员也是有访问权限的；
//
//
////静态成员函数：
////1.所有对象共享同一个函数；
////2.静态成员函数只能访问静态成员变量，因为非静态变量只有定义对象后
//// 才会生成，而静态成员函数可以通过类名访问而进行调用，若静态成员函数访问非静态变量
//// ，那么函数操作的变量可能都没生成，或者不知道访问哪个对象的非静态变量；
////3.同样可以通过对象和类名访问静态成员函数，同样有访问权限；
////4.与非静态成员函数区别，
//
//#include<iostream>
//#include<string>
//using namespace std;
//
//class Apple
//{
//private:
//	static string m_id;
//	
//public:
//	static int m_weigh;
//	int m_length;
//	static void fun1() 
//	{
//		m_weigh = 100;
//		//m_length = "002";错误,length非静态变量；
//	}
//
//};
//
//int  Apple::m_weigh = 10;
//string Apple::m_id = "001";
////加上Apple::告诉编译器这是Apple静态成员，
////而非全局变量；
//
//int main11()
//{
//	Apple a1;
//	a1.m_weigh = 100;
//	Apple a2;
//	a2.m_weigh = 200;
//	Apple::m_weigh = 300;
//	cout << a1.m_weigh << endl;
//	//Apple::m_length = 10;错误！
//	//非静态成员只有在定义一个对象后，才会开辟属于该对象的变量，
//	//定义类时，非静态成员并不会真正开辟相应空间！
//	//此操作相当于访问一个不存在的东西；
//	
//	//Apple::m_id;错误!
//	//m_id是private成员，在类外无法访问；
//	system("pause");
//	return 0;
//}